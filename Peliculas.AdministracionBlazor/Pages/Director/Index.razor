
@page "/director/index"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject ILocalStorageService _localStorageService

<MudText Typo="Typo.h2" Class="ml">Directores</MudText>

<MudTable Items="@directores" Hover="true" Bordered="true" Striped="true">
    <ToolBarContent>
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="goAdd"/>
        <MudSpacer/> 
        <MudTextField @bind-Value="searchText" OnKeyUp="OnSearchKeyUp" Placeholder="Search" Adornment="Adornment.Start" 
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Nombre</MudTh>
        <MudTh>Apellido</MudTh>
        <MudTh>Nacionalidad</MudTh>
        <MudTh>Acciones</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTh DataLabel="Id">@context.Id</MudTh>
        <MudTh DataLabel="Nombre">@context.Nombre</MudTh>
        <MudTh DataLabel="Apellido">@context.Apellido</MudTh>
        <MudTh DataLabel="Nacionalidad">@context.Nacionalidad</MudTh>
        
        <MudTh>
            <MudButton Link="@($"/director/editar/{context.Id}")" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Tertiary" Class="text-center">Editar</MudButton>
            <MudButton Link="@($"/director/eliminar/{context.Id}")" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Warning" Class="text-center">Eliminar</MudButton>
        </MudTh>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<Director> directores = new List<Director>();
    private IEnumerable<Director> filtrarDirectores = new List<Director>();
    private string searchText = "";

    protected override async Task OnInitializedAsync()
    {
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await _localStorageService.GetItemAsync<string>("token"));
        await getAll();
    }

    private async Task getAll()
    {
        var httpResponse = await httpClient.GetStringAsync("director");
        directores = JsonSerializer.Deserialize<IEnumerable<Director>>(httpResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }

    private void goAdd()
    {
        NavigationManager.NavigateTo("director/agregar");
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            buscarDirector();
        }
    }

    private async Task buscarDirector()
    {
        var httpResponse = await httpClient.PostAsJsonAsync($"director/buscar", new Director { Nombre = searchText});
        string respString = await httpResponse.Content.ReadAsStringAsync();
        directores = JsonSerializer.Deserialize<IEnumerable<Director>>(respString, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
    }
}
